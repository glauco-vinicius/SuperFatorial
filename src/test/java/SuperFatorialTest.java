/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import static org.junit.Assert.*;

import java.math.BigInteger;

public class SuperFatorialTest {
    @Test public void testForZeroShouldReturn1() {
        SuperFactorial classUnderTest = new SuperFactorial();
        BigInteger fatorialOf = BigInteger.ZERO;
        BigInteger shouldBe   = BigInteger.ONE;
        BigInteger result     =  classUnderTest.getSuperFatorial(fatorialOf);
        String     msg        = "s(1!) ";
        assertTrue(msg, result.equals(shouldBe));
    }
	
    @Test public void testShouldReturn1() {
        SuperFactorial classUnderTest = new SuperFactorial();
        BigInteger fatorialOf = BigInteger.ONE;
        BigInteger shouldBe   = BigInteger.ONE;
        BigInteger result     =  classUnderTest.getSuperFatorial(fatorialOf);
        String     msg        = "s(1!) ";
        assertTrue(msg, result.equals(shouldBe));
    }
    
    @Test public void testShouldReturn2() {
        SuperFactorial classUnderTest = new SuperFactorial();
        BigInteger fatorialOf = BigInteger.valueOf(2);
        BigInteger shouldBe     = BigInteger.valueOf(2);
        BigInteger result     =  classUnderTest.getSuperFatorial(fatorialOf);
        String     msg        = "s(2!) ";
        System.out.println(msg + "-> "+ result);
        assertTrue(msg, result.equals(shouldBe));
    }
    
    @Test public void testShouldReturn12() {
        SuperFactorial classUnderTest = new SuperFactorial();
        BigInteger fatorialOf = BigInteger.valueOf(3);
        BigInteger shouldBe     = BigInteger.valueOf(12);
        BigInteger result     =  classUnderTest.getSuperFatorial(fatorialOf);
        String     msg        = "s(3!) ";
        System.out.println(msg + "-> "+ result);
        assertTrue(msg, result.equals(shouldBe));  
    }
    
    @Test public void testShouldReturn288() {
        SuperFactorial classUnderTest = new SuperFactorial();
        BigInteger fatorialOf = BigInteger.valueOf(4);
        BigInteger shouldBe     = BigInteger.valueOf(288);
        BigInteger result     =  classUnderTest.getSuperFatorial(fatorialOf);
        String     msg        = "s(4!) ";
        System.out.println(msg + "-> "+ result);
        assertTrue(msg, result.equals(shouldBe));  
    }
    
    @Test public void testShouldReturn34560() {
        SuperFactorial classUnderTest = new SuperFactorial();
        BigInteger fatorialOf = BigInteger.valueOf(5);
        BigInteger shouldBe     = BigInteger.valueOf(34560);
        BigInteger result     =  classUnderTest.getSuperFatorial(fatorialOf);
        String     msg        = "s(5!) ";
        System.out.println(msg + "-> "+ result);
        assertTrue(msg, result.equals(shouldBe));  
     }
    
    
    @Test public void testShouldReturn24883200() {
        SuperFactorial classUnderTest = new SuperFactorial();
        BigInteger fatorialOf = BigInteger.valueOf(6);
        BigInteger shouldBe     = BigInteger.valueOf(24883200);
        BigInteger result     =  classUnderTest.getSuperFatorial(fatorialOf);
        String     msg        = "s(6!) ";
        System.out.println(msg + "-> "+ result);
        assertTrue(msg, result.equals(shouldBe)); 
     }
    
    
    
    @Test public void testShouldReturn125411328000() {
        SuperFactorial classUnderTest = new SuperFactorial();
        BigInteger fatorialOf = BigInteger.valueOf(7);
        BigInteger shouldBe     = BigInteger.valueOf(125411328000L);
        BigInteger result     =  classUnderTest.getSuperFatorial(fatorialOf);
        String     msg        = "s(7!) ";
        System.out.println(msg + "-> "+ result);
        assertTrue(msg, result.equals(shouldBe));     
      } 
}
